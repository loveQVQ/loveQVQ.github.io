<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marin&#39;s Blog</title>
  
  <subtitle>不学习你和咸鱼有什么区别</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-23T06:02:30.636Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Marin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac下安装激活Eclipse JRebel插件</title>
    <link href="http://yoursite.com/2018/08/22/%E6%BF%80%E6%B4%BBEclipse%20JRebel%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/08/22/激活Eclipse JRebel插件/</id>
    <published>2018-08-22T08:56:57.661Z</published>
    <updated>2018-08-23T06:02:30.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>我们做Java Web项目难免要用到JRebel插件，特别是大型的项目，但是这个插件是付费的，现在教大家破解JRebel。</p><p>Windows Eclipse破解JRebel网上教程很多，但是我查了一下基本木有看到Mac下的Eclipse破解JRebel，所以我才写了这篇博客，但是众所周知这东西具有时效性，时间长了或许就没用了。。。</p><h2 id="安装JRebel"><a href="#安装JRebel" class="headerlink" title="安装JRebel"></a>安装JRebel</h2><p>直接在Eclipse商店安装<code>help -&gt; Eclipse MarketPlace -&gt; JRebel -&gt; Install</code><br><a href="https://plugins.jetbrains.com/idea/plugin/4441-JRebel-for-intellij" target="_blank" rel="noopener">官网下载</a>，贼慢。。。😂</p><h2 id="破解JRebel"><a href="#破解JRebel" class="headerlink" title="破解JRebel"></a>破解JRebel</h2><p>使用反向代理破解JRebel，现在激活码注册已经没用了，我自己也试过很多方法，只有这种方法成功激活了。<br>一、下载大神的反向代理软件<a href="https://github.com/ilanyu/ReverseProxy/releases/latest" target="_blank" rel="noopener">GitHub</a></p><p>二、软件没有Mac的版本，我们下载64位Windows就行了，我是在我的Windows虚拟机运行的软件，如果没有只要在局域网内的电脑都可以,我们访问的是地址，如<a href="http://127.0.0.1:8888/Zephyr" target="_blank" rel="noopener">http://127.0.0.1:8888/Zephyr</a> （将127.0.0.1换成运行软件的电脑IP地址）</p><p>三、点击active jrebel（抱歉，我已经激活完了，没有图贴了😂），选择<code>License Server</code>激活，填写地址刚才的地址，邮箱随便填。<br><code>如果出现：“Incorrect license server group URL.Contact license sever administrator.”</code><br>请尝试下面地址：<br>可以尝试使用下面的激活地址：<br><a href="http://127.0.0.1:8888/88414687-3b91-4286-89ba-2dc813b107ce" target="_blank" rel="noopener">http://127.0.0.1:8888/88414687-3b91-4286-89ba-2dc813b107ce</a><br><a href="http://127.0.0.1:8888/ff47a3acc11e-4cb2-836b-9b2b26101696" target="_blank" rel="noopener">http://127.0.0.1:8888/ff47a3acc11e-4cb2-836b-9b2b26101696</a><br><a href="http://127.0.0.1:8888/11d221d1-5cf0-4557-b023-4b4adfeeb36a" target="_blank" rel="noopener">http://127.0.0.1:8888/11d221d1-5cf0-4557-b023-4b4adfeeb36a</a></p><p>四、激活成功不要着急关掉反向代理，打开<code>JRebel Configuration -&gt; overview -&gt; 点击work offline</code>变成我下面这样离线模式。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../media/jrebel/jrebel.png" alt="JRebel" title="">                </div>                <div class="image-caption">JRebel</div>            </figure></p><p>美滋滋，但是还是提醒大家如果有条件请使用正版插件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;我们做Java Web项目难免要用到JRebel插件，特别是大型的项目，但是这个插件是付费的，现在教大家破解JRebel。&lt;/p&gt;
&lt;p&gt;W
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java实现每日登陆增加积分功能</title>
    <link href="http://yoursite.com/2018/04/09/Java%E5%AE%9E%E7%8E%B0%E6%AF%8F%E6%97%A5%E7%99%BB%E9%99%86%E5%A2%9E%E5%8A%A0%E7%A7%AF%E5%88%86%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2018/04/09/Java实现每日登陆增加积分功能/</id>
    <published>2018-04-09T07:04:52.629Z</published>
    <updated>2018-08-23T05:49:37.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>数据库中增加最后登陆时间的字段<code>（last_login_time）</code>，通过这个值与系统当前时间进行比较。</p><p>看到这应该明白了，只要登陆成功的时候执行判断这两个时间是否同一天就可以实现这个功能，如果是同一天我们就给他增加积分，不是我们就不加。</p><p>ps：要注意了，登陆成功的时候要更新最后一次登陆时间的，不然登陆一次就会加一次积分。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>这个方法最关键的就是判断同一天这个功能了，我们可以利用commons-lang3包中的isSameDay方法。</p><p><code>org.apache.commons.lang3.time.DateUtils.isSameDay(Date date1, Date date2)</code></p><p>我们来看<code>isSameDay方法</code>源代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSameDay</span><span class="params">(Date date1, Date date2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(date1 != <span class="keyword">null</span> &amp;&amp; date2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Calendar cal1 = Calendar.getInstance();</span><br><span class="line">            cal1.setTime(date1);</span><br><span class="line">            Calendar cal2 = Calendar.getInstance();</span><br><span class="line">            cal2.setTime(date2);</span><br><span class="line">            <span class="keyword">return</span> isSameDay(cal1, cal2);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The date must not be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSameDay</span><span class="params">(Calendar cal1, Calendar cal2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cal1 != <span class="keyword">null</span> &amp;&amp; cal2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cal1.get(<span class="number">0</span>) == cal2.get(<span class="number">0</span>) &amp;&amp; cal1.get(<span class="number">1</span>) == cal2.get(<span class="number">1</span>) &amp;&amp; cal1.get(<span class="number">6</span>) == cal2.get(<span class="number">6</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The date must not be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面方法中的0、1、6的含义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> ERA = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the</span></span><br><span class="line"><span class="comment">     * year. This is a calendar-specific value; see subclass documentation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> YEAR = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the day</span></span><br><span class="line"><span class="comment">     * number within the current year.  The first day of the year has value 1.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> DAY_OF_YEAR = <span class="number">6</span>;</span><br></pre></td></tr></table></figure><p>ps:利用是否是同一ERA（翻译成：世纪）且同一年的第N天来判断的。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>在贴一个如何获得明天零点的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCalendar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            Date currentEndDate = <span class="keyword">new</span> Date();</span><br><span class="line">            Calendar cal = Calendar.getInstance();</span><br><span class="line">            cal.setTime(currentEndDate);</span><br><span class="line">            cal.add(Calendar.DATE, <span class="number">1</span>);</span><br><span class="line">            cal.set(Calendar.AM_PM, <span class="number">0</span>);</span><br><span class="line">            cal.set(Calendar.HOUR, <span class="number">0</span>);</span><br><span class="line">            cal.set(Calendar.MINUTE, <span class="number">0</span>);</span><br><span class="line">            cal.set(Calendar.SECOND, <span class="number">0</span>);</span><br><span class="line">            Date nextDate = cal.getTime();</span><br><span class="line"></span><br><span class="line">            System.out.println(nextDate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;数据库中增加最后登陆时间的字段&lt;code&gt;（last_login_time）&lt;/code&gt;，通过这个值与系统当前时间进行比较。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java IO流</title>
    <link href="http://yoursite.com/2018/03/26/JavaIO/"/>
    <id>http://yoursite.com/2018/03/26/JavaIO/</id>
    <published>2018-03-26T07:19:01.101Z</published>
    <updated>2018-08-23T06:06:22.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java中对于数据的操作都是通过流来实现的，而所有操作流的对象都在IO包中。所谓IO流其实是指，Input和Output流。<br>首先明白<code>字节(Byte)</code>和<code>字符(Character)</code>的大小</p><ul><li>1 byte = 8 bit</li><li>1 char = 2 byte = 16 bit(Java默认UTF-16编码)</li></ul><p>详细请看下面关系图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../media/io/io.jpeg" alt="IO图" title="">                </div>                <div class="image-caption">IO图</div>            </figure></p><h2 id="File对象"><a href="#File对象" class="headerlink" title="File对象"></a>File对象</h2><p>File对象用来描述操作系统中文件对象，可以是单个文件或是一个文件目录</p><h3 id="1-创建File对象"><a href="#1-创建File对象" class="headerlink" title="1.创建File对象"></a>1.创建File对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"C:"</span> + File.separator+ <span class="string">"1.txt"</span>);</span><br></pre></td></tr></table></figure><p>ps: File.separator是File封装的静态字段，表示路径分隔符，因为在Windows和Linux系统分隔符不一样，所有如果用”/”在不同环境下就会报错，所以采用File.separator来表示分隔符，这是一个良好的代码编写习惯。</p><h3 id="2-File对象常用API"><a href="#2-File对象常用API" class="headerlink" title="2.File对象常用API"></a>2.File对象常用API</h3><p>File常见API没多少，如果不知道的可以自行百度一波，都是很简单的🤣。</p><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>字节流一般用来操作媒体文件（媒体文件也是以字节存储的）</p><p><code>InputStream:</code>所有字节输入流的父类，具有基础的读方法<br><code>int read()</code>–读取一个字节，以int形式返回,如果返回值为-1，说明读到了文件的末尾<br><code>int read(byte[] b)</code>–尝试最多读取给定byte数组的长度个字节并存入该数组，返回值为实际读取到的自己量</p><p><code>OutPutStream:</code>是所有字节输出流的父类，具有基础的写出方法<br><code>void write(int d)</code>–写出一个字节<br><code>void write(byte[] d)</code>–将给定字节数组中的所有字节全部写出<br><code>void write(byte[] d,int off,int len)</code>–写出字节数组中从下标off开始的连续length个字节</p><h3 id="2-练习"><a href="#2-练习" class="headerlink" title="2.练习"></a>2.练习</h3><p>个人认为对于IO流的理解还是得靠代码，读懂代码才是王道。<br><code>Test:</code>复制一张图片F:\java_Demo\1.bmp到F:\java_Demo\2.bmp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CopyPic</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </span><br><span class="line">        copyBmp();  </span><br><span class="line">        System.out.println(<span class="string">"复制完成"</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyBmp</span><span class="params">()</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;  </span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="comment">//写入流关联文件 </span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">"F:"</span>+File.separator+<span class="string">"java_Demo"</span>+File.separator+<span class="string">"1.bmp"</span>); </span><br><span class="line">        <span class="comment">//读取流关联文件</span></span><br><span class="line">            fos = <span class="keyword">new</span> FileInputStream(<span class="string">"F:"</span>+File.separator+<span class="string">"java_Demo"</span>+File.separator+<span class="string">"2.bmp"</span>);  </span><br><span class="line">            <span class="keyword">byte</span>[] copy = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];  </span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;  </span><br><span class="line">            <span class="keyword">while</span>((len=fis.read(copy))!=-<span class="number">1</span>) &#123;  </span><br><span class="line">            fos.write(copy,<span class="number">0</span>,len);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"复制文件异常"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">finally</span> &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                <span class="keyword">if</span>(fis!=<span class="keyword">null</span>) fis.close();  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"读取流"</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">          </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-字节流缓冲区"><a href="#3-字节流缓冲区" class="headerlink" title="3.字节流缓冲区"></a>3.字节流缓冲区</h3><p>BufferedInputStream,BufferedOutputStream<br>缓冲流的内部维护了一个缓冲区，每当向输入输出流读写数据时，会先将数据保存在缓冲区，当缓冲区满了以后，将数据一次性读写出来，这样可以减少IO操作的次数，从而提高读写效率</p><p><code>Demo:</code>使用缓冲输出流和缓冲输入流实现文件的复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SummaryBISAndBOS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.先将文件中的内容读入到缓冲输入流中</span></span><br><span class="line"><span class="comment">         * 2.将输入流中的数据通过缓冲输出流写入到目标文件中</span></span><br><span class="line"><span class="comment">         * 3.关闭输入流和输出流</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> begin=System.currentTimeMillis();</span><br><span class="line">            FileInputStream fis=<span class="keyword">new</span> FileInputStream(<span class="string">"BISDemo.txt"</span>);</span><br><span class="line">            BufferedInputStream bis=<span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line"></span><br><span class="line">            FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(<span class="string">"BOSDemo.txt"</span>);</span><br><span class="line">            BufferedOutputStream bos=<span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> size=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10240</span>];</span><br><span class="line">            <span class="keyword">while</span>((size=bis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buffer, <span class="number">0</span>, size);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//刷新此缓冲的输出流，保证数据全部都能写出</span></span><br><span class="line">            bos.flush();</span><br><span class="line">            bis.close();</span><br><span class="line">            bos.close();</span><br><span class="line">            <span class="keyword">long</span> end=System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">"使用缓冲输出流和缓冲输入流实现文件的复制完毕！耗时："</span>+(end-begin)+<span class="string">"毫秒"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>字符流以char为单位对数据进行读写，一次处理一个unicode，字符流的底层是基本的字节流。<br><code>Reader</code>是字符输入流的父类</p><p><code>int read()</code> –读取一个字符，这个int返回值可以转换为其对应的char型字符，如果返回-1，说明已经到达末尾<br><code>int read(char[] chars)</code> –从流中读取一个字符数组的length个字符并存入该数组，返回值为实际读取到的字符量</p><p>Writer是字符输出流的父类<br><code>void write(int c)</code> –写出一个字符<br><code>void write(char[] chs)</code> –将给定字符数组中的所有字符写出<br><code>void write(String str)</code> –将给定的字符串写出<br><code>void write(char[] chs,int off,int len)</code> –将给定字符数组中从off开始连续len个字符写出</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><code>Test:</code> 用字符流拷贝文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CopyText</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line">        sop(<span class="string">"请输入要拷贝的文件的路径:"</span>);  </span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);  </span><br><span class="line">        String source = in.next();  </span><br><span class="line">        sop(<span class="string">"请输入需要拷贝到那个位置的路径以及生成的文件名:"</span>);  </span><br><span class="line">        String destination = in.next();  </span><br><span class="line">        in.close();  </span><br><span class="line">        CopyTextDemo(source,destination);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****************文件Copy*********************/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CopyTextDemo</span><span class="params">(String source,String destination)</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(destination);  </span><br><span class="line">            FileReader fr = <span class="keyword">new</span> FileReader(source);  </span><br><span class="line">            <span class="keyword">char</span> []  buf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];   </span><br><span class="line">            <span class="comment">//将Denmo中的文件读取到buf数组中。  </span></span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;      </span><br><span class="line">            <span class="keyword">while</span>((num = fr.read(buf))!=-<span class="number">1</span>) &#123;  </span><br><span class="line">                               <span class="comment">//String(char[] value , int offest,int count) 分配一个新的String,包含从offest开始的count个字符  </span></span><br><span class="line">                fw.write(<span class="keyword">new</span> String(buf,<span class="number">0</span>,num));  </span><br><span class="line">            &#125;  </span><br><span class="line">            fr.close();  </span><br><span class="line">            fw.close();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            sop(e.toString());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**********************Println************************/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(Object obj)</span> </span>&#123;  </span><br><span class="line">        System.out.println(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符流缓冲区"><a href="#字符流缓冲区" class="headerlink" title="字符流缓冲区"></a>字符流缓冲区</h3><p><code>BufferedReader</code>，<code>BufferedWriter</code> 作用及实现和字节流缓冲区大同小异。</p><p><code>Test:</code> BufferedReader示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferedReaderDemo</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//创建一个字符读取流流对象，和文件关联  </span></span><br><span class="line">        FileReader rw = <span class="keyword">new</span> FileReader(<span class="string">"buf.txt"</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//只要将需要被提高效率的流作为参数传递给缓冲区的构造函数即可  </span></span><br><span class="line">        BufferedReader brw = <span class="keyword">new</span> BufferedReader(rw);  </span><br><span class="line">  </span><br><span class="line">          </span><br><span class="line">        <span class="keyword">for</span>(;;) &#123;  </span><br><span class="line">            String s = brw.readLine();  </span><br><span class="line">            <span class="keyword">if</span>(s==<span class="keyword">null</span>) <span class="keyword">break</span>;  </span><br><span class="line">            System.out.println(s);  </span><br><span class="line">        &#125;  </span><br><span class="line">          </span><br><span class="line">        brw.close();<span class="comment">//关闭输入流对象  </span></span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Test:</code> BufferedWriter示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferedWriterDemo</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//创建一个字符写入流对象  </span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"buf.txt"</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//为了提高字符写入效率，加入了缓冲技术。  </span></span><br><span class="line">        <span class="comment">//只要将需要被提高效率的流作为参数传递给缓冲区的构造函数即可  </span></span><br><span class="line">        BufferedWriter bfw = <span class="keyword">new</span> BufferedWriter(fw);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//bfw.write("abc\r\nde");  </span></span><br><span class="line">        <span class="comment">//bfw.newLine();               这行代码等价于bfw.write("\r\n"),相当于一个跨平台的换行符  </span></span><br><span class="line">        <span class="comment">//用到缓冲区就必须要刷新  </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>; x &lt; <span class="number">5</span>; x++) &#123;  </span><br><span class="line">            bfw.write(<span class="string">"abc"</span>);  </span><br><span class="line">            bfw.newLine();                  <span class="comment">//java提供了一个跨平台的换行符newLine();  </span></span><br><span class="line">            bfw.flush();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        bfw.flush();                                                <span class="comment">//刷新缓冲区  </span></span><br><span class="line">        bfw.close();                                                <span class="comment">//关闭缓冲区，但是必须要先刷新  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">//注意，关闭缓冲区就是在关闭缓冲中的流对象  </span></span><br><span class="line">        fw.close();                                                 <span class="comment">//关闭输入流对象  </span></span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><p>NIO 非阻塞IO(面向缓冲)<br>1.NIO弥补了原来I/O的不足之处，在IO操作中提供了高速度的，面向块的IO操作<br>2.NIO中数据的打包和传递方式是以块为单位的，普通IO中以流为操作单位</p><p>NIO的2个重要特性<br>(1)通道<br>通道(Channel)是对于普通I/O中流的模拟，从任何地方读数据，或将数据写到任何地方都必须通过一个Channel对象</p><p>(2)缓冲区<br>缓冲区Buffer实质上是一个容器对象，发送给一个通道的所有对象都必须首先放到缓冲区中；同样，从一个通道中读取数据时也需要先读取到缓冲区中。<br>在NIO中，所有数据都是用缓冲区进行处理的。</p><p>ps:NIO效率无疑是要大大的高于IO操作的，但是实现过程要比IO复杂的多，可自行百度学习。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>复习了一下以前学习的IO知识，写的不是很完善，因为写博客很花时间，我现在每天很忙😂，继续努力吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Java中对于数据的操作都是通过流来实现的，而所有操作流的对象都在IO包中。所谓IO流其实是指，Input和Output流。&lt;br&gt;首先明白
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>仅以这篇博客记录我未来的编程生活</title>
    <link href="http://yoursite.com/2018/03/25/firstBlog/"/>
    <id>http://yoursite.com/2018/03/25/firstBlog/</id>
    <published>2018-03-25T13:57:42.266Z</published>
    <updated>2018-03-25T14:17:36.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识是一个不断积累的过程"><a href="#知识是一个不断积累的过程" class="headerlink" title="知识是一个不断积累的过程"></a>知识是一个不断积累的过程</h2><p>2015年开始进入大学接触编程先是学了C，然后是C#，现在主要在使用Java进行开发，还想学习Python。回想起之前的编程学习之路感觉自己学的多，忘记的更多😂，现在我想把我学习的知识记录下来，方便自己以后翻看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello world!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;知识是一个不断积累的过程&quot;&gt;&lt;a href=&quot;#知识是一个不断积累的过程&quot; class=&quot;headerlink&quot; title=&quot;知识是一个不断积累的过程&quot;&gt;&lt;/a&gt;知识是一个不断积累的过程&lt;/h2&gt;&lt;p&gt;2015年开始进入大学接触编程先是学了C，然后是C#，现在主
      
    
    </summary>
    
    
  </entry>
  
</feed>
