{"meta":{"title":"Marin's Blog","subtitle":"不学习你和咸鱼有什么区别","description":"marin的个人学习博客，分享知识，享受快乐。","author":"Marin","url":"http://marin.kim"},"pages":[{"title":"categories","date":"2018-08-23T07:12:13.475Z","updated":"2018-08-23T07:12:13.466Z","comments":true,"path":"categories/index.html","permalink":"http://marin.kim/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-08-23T07:09:29.915Z","updated":"2018-08-23T07:09:29.900Z","comments":true,"path":"tags/index.html","permalink":"http://marin.kim/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Eclipse Spring MVC项目搭建","slug":"Spring MVC","date":"2018-08-24T08:18:27.417Z","updated":"2018-09-01T05:15:54.541Z","comments":true,"path":"2018/08/24/Spring MVC/","link":"","permalink":"http://marin.kim/2018/08/24/Spring MVC/","excerpt":"","text":"概述今天早上搭建了一下SpringMVC的框架写了一个小项目，遇到了一些问题，在此回顾一下。项目环境:Eclipse + Maven + SpringMVC + SpringJDBC + MiniUi(前台框架)PS: 你的Eclipse需要安装Spring插件🤧 项目结构 SpringMVC项目结构 项目搭建好了，接下来我们一步步搭建项目 创建maven项目首先创建maven项目 File -&gt; New -&gt; Maven Project引入maven依赖包,pom.xml内容如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.epoint&lt;/groupId&gt; &lt;artifactId&gt;SMVC&lt;/artifactId&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;SMVC Maven Webapp&lt;/name&gt; &lt;url&gt;http://maven.apache.org&lt;/url&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- servlet --&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- mysql 链接 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.6&lt;/version&gt; &lt;/dependency&gt; &lt;!-- durid连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.0.13&lt;/version&gt; &lt;/dependency&gt; &lt;!-- fastjson --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.43&lt;/version&gt; &lt;/dependency&gt; &lt;!-- spring mvc依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;5.0.8.RELEASE&lt;/version&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;5.0.8.RELEASE&lt;/version&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- spring jdbc --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;5.0.8.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;SMVC&lt;/finalName&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.8.0&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;version&gt;2.1&lt;/version&gt; &lt;configuration&gt; &lt;port&gt;9090&lt;/port&gt; &lt;path&gt;/$&#123;project.artifactId&#125;&lt;/path&gt; &lt;uriEncoding&gt;UTF-8&lt;/uriEncoding&gt; &lt;server&gt;tomcat7&lt;/server&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 完成后跟新一下项目，如果maven报错，看报错信息，如果提示缺少web.xml就自己在webapp -&gt; WEB-INF -&gt; web.xml创建另外或许会报Cannot change version of project facet Dynamic web module to 3.0这个错误，解决请看这里。 配置web.xml12345678910111213141516171819202122232425262728293031&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" version=\"3.0\"&gt; &lt;servlet&gt; &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt;&lt;/web-app&gt; 如果不理解配置含义的，可以自行百度，这里就不详细说了。😷 配置数据源如上图的目录结构，我们需要创建SpringMvc的配置文件applicationContext.xml和放置数据源配置信息的文件jdbc.propertiesapplicationContext.xml的内容如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:mvc=\"http://www.springframework.org/schema/mvc\" xsi:schemaLocation=\"http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans-3.0.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context-3.0.xsdhttp://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd\"&gt; &lt;!-- 搜索spring控件 --&gt; &lt;context:component-scan base-package=\"com.epoint\"&gt;&lt;/context:component-scan&gt; &lt;!-- 加载配置文件 --&gt; &lt;context:property-placeholder location=\"classpath:jdbc.properties\" /&gt; &lt;!-- 配置Druid数据源 --&gt; &lt;bean id=\"ds\" class=\"com.alibaba.druid.pool.DruidDataSource\" destroy-method=\"close\"&gt; &lt;property name=\"driverClassName\" value=\"$&#123;jdbc.driver&#125;\"/&gt; &lt;property name=\"url\" value=\"$&#123;jdbc.url&#125;\"/&gt; &lt;property name=\"username\" value=\"$&#123;jdbc.username&#125;\"/&gt; &lt;property name=\"password\" value=\"$&#123;jdbc.password&#125;\"/&gt; &lt;property name=\"maxActive\" value=\"$&#123;jdbc.maxActive&#125;\"/&gt; &lt;property name=\"initialSize\" value=\"$&#123;jdbc.initialSize&#125;\"/&gt; &lt;property name=\"minIdle\" value=\"$&#123;jdbc.minIdle&#125;\"/&gt; &lt;property name=\"timeBetweenEvictionRunsMillis\" value=\"$&#123;jdbc.timeBetweenEvictionRunsMillis&#125;\"/&gt; &lt;property name=\"minEvictableIdleTimeMillis\" value=\"$&#123;jdbc.minEvictableIdleTimeMillis&#125;\"/&gt; &lt;property name=\"testOnBorrow\" value=\"$&#123;jdbc.testOnBorrow&#125;\"/&gt; &lt;property name=\"validationQuery\" value=\"$&#123;jdbc.validationQuery&#125;\"/&gt; &lt;!-- 后续配置可以继续添加 --&gt; &lt;/bean&gt; &lt;!-- 配置Jdbc模板 --&gt; &lt;bean id=\"jdbcTemplate\" class=\"org.springframework.jdbc.core.JdbcTemplate\"&gt; &lt;property name=\"dataSource\" ref=\"ds\"/&gt; &lt;/bean&gt; &lt;mvc:resources mapping=\"/pages/**\" location=\"/pages/\" /&gt; &lt;mvc:resources mapping=\"/scripts/**\" location=\"/scripts/\" /&gt; &lt;mvc:resources mapping=\"/res/**\" location=\"/res/\" /&gt; &lt;mvc:resources mapping=\"/data/**\" location=\"/data/\" /&gt; &lt;mvc:annotation-driven/&gt; &lt;/beans&gt; 这里解释一下&lt;mvc:resources/&gt;，因为我的项目页面是纯静态的HTML页面，不是jsp页面，所以这边要对静态资源放行，因为MiniUi的资源在scripts和res目录下所以这边配置了。其他情况也要自己看情况配置。jdbc.properties文件内容123456789101112131415161718#数据库驱动jdbc.driver=com.mysql.jdbc.Driver#数据库的连接字符串jdbc.url=jdbc:mysql://127.0.0.1:3306/test??useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false#用户名jdbc.username=root#密码jdbc.password=？？？？#druid配置信息jdbc.initialSize=5jdbc.maxActive=10jdbc.minIdle=5jdbc.maxIdle=10jdbc.timeBetweenEvictionRunsMillis=3600000jdbc.minEvictableIdleTimeMillis=3600000jdbc.testOnBorrow=truejdbc.validationQuery=SELECT 1 FROM DUAL 简单的demo到了这里项目框架已经搭好了，我们来写一个简单的demo来验证。我们来完成一个前台MiniUi用DataGrid重后台获取数据的demo。Dao层的接口实现方法：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package com.epoint.dao.impl;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.jdbc.core.BeanPropertyRowMapper;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.stereotype.Repository;import com.epoint.dao.StudentInfoDao;import com.epoint.domain.StudentInfo;import com.epoint.util.StringUtil;@Repositorypublic class StudentInfoDaoImpl implements StudentInfoDao &#123; @Autowired private JdbcTemplate jdbcTemplate; @Override public List&lt;StudentInfo&gt; getAllStudentInfo(String key, int startPage, int endPage) &#123; String sql = null; List&lt;StudentInfo&gt; stuInfo = null; int actualhours = 0; if (key != null) &#123; if (StringUtil.isNumeric(key)) &#123; actualhours = Integer.parseInt(key); sql = \"select * from studentinfo where stuid = ? limit ?,?\"; stuInfo = jdbcTemplate.query(sql, new Object[] &#123; actualhours, startPage, endPage &#125;, new BeanPropertyRowMapper&lt;StudentInfo&gt;(StudentInfo.class)); &#125; else &#123; sql = \"select * from studentinfo where stuid = ? limit ?,?\"; stuInfo = jdbcTemplate.query(sql, new Object[] &#123; key, startPage, endPage &#125;, new BeanPropertyRowMapper&lt;StudentInfo&gt;(StudentInfo.class)); &#125; &#125; else &#123; sql = \"select * from studentinfo limit ?,?\"; stuInfo = jdbcTemplate.query(sql, new Object[] &#123; startPage, endPage &#125;, new BeanPropertyRowMapper&lt;StudentInfo&gt;(StudentInfo.class)); &#125; if (null != stuInfo &amp;&amp; stuInfo.size() &gt; 0) &#123; return stuInfo; &#125; return null; &#125; @Override public int getStudentInfoTotal() &#123; String sql = \"select count(*) from studentinfo\"; return jdbcTemplate.queryForObject(sql, Integer.class); &#125; @Override public int addSutdentInfo(StudentInfo studentInfo) &#123; String sql = \"insert into studentinfo values (?,?,?,?,?,?,?,?)\"; return jdbcTemplate.update(sql, new Object[] &#123; studentInfo.getStuID(), studentInfo.getStuName(), studentInfo.getProfession(), studentInfo.getAddDate(), studentInfo.getSex(), studentInfo.getIdNum(), studentInfo.getTotalScore(), studentInfo.getNote() &#125;); &#125;&#125; service层的接口实现方法：12345678910111213141516171819202122232425262728293031323334353637383940414243package com.epoint.service.impl;import java.util.List;import java.util.UUID;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.epoint.dao.StudentInfoDao;import com.epoint.domain.StudentInfo;import com.epoint.service.StudentInfoService;@Servicepublic class StudentInfoServiceImpl implements StudentInfoService &#123; @Autowired private StudentInfoDao stuInfoDao; @Override public List&lt;StudentInfo&gt; getAllStudentInfo(String key, int startPage, int endPage) &#123; return stuInfoDao.getAllStudentInfo(key, startPage, endPage); &#125; @Override public int getStudentInfoTotal() &#123; return stuInfoDao.getStudentInfoTotal(); &#125; @Override public boolean addSutdentInfo(StudentInfo studentInfo) &#123; // 添加id和学分 studentInfo.setStuID(UUID.randomUUID().toString()); studentInfo.setTotalScore(0); int a = 0; a = stuInfoDao.addSutdentInfo(studentInfo); if (a == 0) &#123; return false; &#125; return true; &#125;&#125; Controller层的实现：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117import org.springframework.web.bind.annotation.RequestMapping;import com.alibaba.fastjson.JSON;import com.epoint.domain.StudentInfo;import com.epoint.service.StudentInfoService;@Controller@RequestMapping(\"/studentinfo\")public class StudentInfoController &#123; @Autowired private StudentInfoService stuInfoService; @RequestMapping(\"/addstu\") public void addStudentInfo(HttpServletRequest req, HttpServletResponse resp) throws IOException &#123; resp.setCharacterEncoding(\"utf-8\"); Result rs = new Result(); String json = req.getParameter(\"data\"); System.out.println(json); StudentInfo stuInfo = JSON.parseObject(json, StudentInfo.class); boolean a = false; a = stuInfoService.addSutdentInfo(stuInfo); if (a) &#123; rs.setSuccess(true); &#125; resp.getWriter().write(JSON.toJSONString(rs)); &#125; @RequestMapping(\"/list\") public void studentInfoList(HttpServletRequest req, HttpServletResponse resp) throws IOException &#123; resp.setCharacterEncoding(\"utf-8\"); // 分页 int pageIndex = Integer.parseInt(req.getParameter(\"pageIndex\")); int pageSize = Integer.parseInt(req.getParameter(\"pageSize\")); int start = pageIndex * pageSize; int end = start + pageSize; // 搜索 String key = req.getParameter(\"key\"); List&lt;StudentInfo&gt; ls = new ArrayList&lt;StudentInfo&gt;(); ls = stuInfoService.getAllStudentInfo(key, start, end); int total = stuInfoService.getStudentInfoTotal(); Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); if (ls == null) &#123; map.put(\"total\", null); map.put(\"data\", null); &#125; else &#123; map.put(\"total\", total); map.put(\"data\", ls); &#125; resp.getWriter().write(JSON.toJSONString(map)); &#125;&#125;import org.springframework.web.bind.annotation.RequestMapping;import com.alibaba.fastjson.JSON;import com.epoint.domain.StudentInfo;import com.epoint.service.StudentInfoService;@Controller@RequestMapping(\"/studentinfo\")public class StudentInfoController &#123; @Autowired private StudentInfoService stuInfoService; @RequestMapping(\"/addstu\") public void addStudentInfo(HttpServletRequest req, HttpServletResponse resp) throws IOException &#123; resp.setCharacterEncoding(\"utf-8\"); Result rs = new Result(); String json = req.getParameter(\"data\"); System.out.println(json); StudentInfo stuInfo = JSON.parseObject(json, StudentInfo.class); boolean a = false; a = stuInfoService.addSutdentInfo(stuInfo); if (a) &#123; rs.setSuccess(true); &#125; resp.getWriter().write(JSON.toJSONString(rs)); &#125; @RequestMapping(\"/list\") public void studentInfoList(HttpServletRequest req, HttpServletResponse resp) throws IOException &#123; resp.setCharacterEncoding(\"utf-8\"); // 分页 int pageIndex = Integer.parseInt(req.getParameter(\"pageIndex\")); int pageSize = Integer.parseInt(req.getParameter(\"pageSize\")); int start = pageIndex * pageSize; int end = start + pageSize; // 搜索 String key = req.getParameter(\"key\"); List&lt;StudentInfo&gt; ls = new ArrayList&lt;StudentInfo&gt;(); ls = stuInfoService.getAllStudentInfo(key, start, end); int total = stuInfoService.getStudentInfoTotal(); Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); if (ls == null) &#123; map.put(\"total\", null); map.put(\"data\", null); &#125; else &#123; map.put(\"total\", total); map.put(\"data\", ls); &#125; resp.getWriter().write(JSON.toJSONString(map)); &#125;&#125; 好了接下来就是HTML的代码了1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=\"UTF-8\"&gt;&lt;title&gt;student list&lt;/title&gt;&lt;/head&gt;&lt;script type=\"text/javascript\" src=\"../scripts/boot.js\"&gt;&lt;/script&gt;&lt;body&gt;&lt;!-- 按钮事件 --&gt; &lt;div style=\"width:800px;\"&gt; &lt;div class=\"mini-toolbar\" style=\"border-bottom:0;padding:0px;\"&gt; &lt;table style=\"width:100%;\"&gt; &lt;tr&gt; &lt;td style=\"width:100%;\"&gt; &lt;a class=\"mini-button\" iconCls=\"icon-add\" onclick=\"add()\"&gt;增加&lt;/a&gt; &lt;a class=\"mini-button\" iconCls=\"icon-add\" onclick=\"edit()\"&gt;编辑&lt;/a&gt; &lt;a class=\"mini-button\" iconCls=\"icon-remove\" onclick=\"remove()\"&gt;删除&lt;/a&gt; &lt;/td&gt; &lt;td style=\"white-space:nowrap;\"&gt; &lt;input id=\"key\" class=\"mini-textbox\" emptyText=\"请输入姓名\" style=\"width:150px;\" onenter=\"onKeyEnter\"/&gt; &lt;a class=\"mini-button\" onclick=\"search()\"&gt;查询&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 表格展示 sizeList=\"[10,20,30,40]\" --&gt; &lt;div id=\"datagrid1\" class=\"mini-datagrid\" style=\"width:800px;height:280px;\" allowResize=\"true\" url=\"../../SMVC/studentinfo/list\" idField=\"id\" multiSelect=\"true\"&gt; &lt;div property=\"columns\"&gt; &lt;!-- 复选框 --&gt; &lt;div type=\"checkcolumn\"&gt;&lt;/div&gt; &lt;div type=\"indexcolumn\"&gt;&lt;/div&gt; &lt;div field=\"stuID\" headerAlign=\"center\" allowSort=\"true\" align=\"center\"&gt;序号&lt;/div&gt; &lt;div field=\"stuName\" headerAlign=\"center\" allowSort=\"true\"&gt;学生姓名&lt;/div&gt; &lt;div field=\"profession\" headerAlign=\"center\" allowSort=\"true\"&gt;专业&lt;/div&gt; &lt;div field=\"addDate\" headerAlign=\"center\" allowSort=\"true\" dateFormat=\"yyyy-MM-dd\"&gt;入学日期&lt;/div&gt; &lt;div field=\"sex\" headerAlign=\"center\" allowSort=\"true\"&gt;性别&lt;/div&gt; &lt;div field=\"idNum\" headerAlign=\"center\" allowSort=\"true\"&gt;身份证&lt;/div&gt; &lt;div field=\"totalScore\" headerAlign=\"center\" allowSort=\"true\"&gt;总学分&lt;/div&gt; &lt;div field=\"note\" headerAlign=\"center\" allowSort=\"true\"&gt;说明&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;script type=\"text/javascript\"&gt;mini.parse();var grid = mini.get(\"datagrid1\");grid.load();&lt;/script&gt;&lt;/html&gt; 实现的效果图 效果图 总结好了，项目已经搭好了，下一篇准备发搭建Spring Boot框架的教程，真的很好用。🧐","categories":[{"name":"Java","slug":"Java","permalink":"http://marin.kim/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://marin.kim/tags/Java/"},{"name":"Framework","slug":"Framework","permalink":"http://marin.kim/tags/Framework/"}]},{"title":"Mac下安装激活Eclipse JRebel插件","slug":"激活Eclipse JRebel插件","date":"2018-08-22T08:56:57.661Z","updated":"2018-08-23T06:57:21.643Z","comments":true,"path":"2018/08/22/激活Eclipse JRebel插件/","link":"","permalink":"http://marin.kim/2018/08/22/激活Eclipse JRebel插件/","excerpt":"","text":"概述我们做Java Web项目难免要用到JRebel插件，特别是大型的项目，但是这个插件是付费的，现在教大家破解JRebel。 Windows Eclipse破解JRebel网上教程很多，但是我查了一下基本木有看到Mac下的Eclipse破解JRebel，所以我才写了这篇博客，但是众所周知这东西具有时效性，时间长了或许就没用了。。。 安装JRebel直接在Eclipse商店安装help -&gt; Eclipse MarketPlace -&gt; JRebel -&gt; Install官网下载，贼慢。。。😂 破解JRebel使用反向代理破解JRebel，现在激活码注册已经没用了，我自己也试过很多方法，只有这种方法成功激活了。一、下载大神的反向代理软件GitHub 二、软件没有Mac的版本，我们下载64位Windows就行了，我是在我的Windows虚拟机运行的软件，如果没有只要在局域网内的电脑都可以,我们访问的是地址，如http://127.0.0.1:8888/Zephyr （将127.0.0.1换成运行软件的电脑IP地址） 三、点击active jrebel（抱歉，我已经激活完了，没有图贴了😂），选择License Server激活，填写地址刚才的地址，邮箱随便填。如果出现：“Incorrect license server group URL.Contact license sever administrator.”请尝试下面地址：可以尝试使用下面的激活地址：http://127.0.0.1:8888/88414687-3b91-4286-89ba-2dc813b107cehttp://127.0.0.1:8888/ff47a3acc11e-4cb2-836b-9b2b26101696http://127.0.0.1:8888/11d221d1-5cf0-4557-b023-4b4adfeeb36a 四、激活成功不要着急关掉反向代理，打开JRebel Configuration -&gt; overview -&gt; 点击work offline变成我下面这样离线模式。 JRebel 美滋滋，但是还是提醒大家如果有条件请使用正版插件。","categories":[],"tags":[{"name":"Util","slug":"Util","permalink":"http://marin.kim/tags/Util/"}]},{"title":"Java实现每日登陆增加积分功能","slug":"Java实现每日登陆增加积分功能","date":"2018-04-09T07:04:52.629Z","updated":"2018-08-23T07:00:55.322Z","comments":true,"path":"2018/04/09/Java实现每日登陆增加积分功能/","link":"","permalink":"http://marin.kim/2018/04/09/Java实现每日登陆增加积分功能/","excerpt":"","text":"思路数据库中增加最后登陆时间的字段（last_login_time），通过这个值与系统当前时间进行比较。 看到这应该明白了，只要登陆成功的时候执行判断这两个时间是否同一天就可以实现这个功能，如果是同一天我们就给他增加积分，不是我们就不加。 ps：要注意了，登陆成功的时候要更新最后一次登陆时间的，不然登陆一次就会加一次积分。 代码这个方法最关键的就是判断同一天这个功能了，我们可以利用commons-lang3包中的isSameDay方法。 org.apache.commons.lang3.time.DateUtils.isSameDay(Date date1, Date date2) 我们来看isSameDay方法源代码 12345678910111213141516171819public static boolean isSameDay(Date date1, Date date2) &#123; if(date1 != null &amp;&amp; date2 != null) &#123; Calendar cal1 = Calendar.getInstance(); cal1.setTime(date1); Calendar cal2 = Calendar.getInstance(); cal2.setTime(date2); return isSameDay(cal1, cal2); &#125; else &#123; throw new IllegalArgumentException(\"The date must not be null\"); &#125; &#125; public static boolean isSameDay(Calendar cal1, Calendar cal2) &#123; if(cal1 != null &amp;&amp; cal2 != null) &#123; return cal1.get(0) == cal2.get(0) &amp;&amp; cal1.get(1) == cal2.get(1) &amp;&amp; cal1.get(6) == cal2.get(6); &#125; else &#123; throw new IllegalArgumentException(\"The date must not be null\"); &#125; &#125; 上面方法中的0、1、6的含义如下： 123456789101112131415public final static int ERA = 0; /** * Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the * year. This is a calendar-specific value; see subclass documentation. */ public final static int YEAR = 1; /** * Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the day * number within the current year. The first day of the year has value 1. */ public final static int DAY_OF_YEAR = 6; ps:利用是否是同一ERA（翻译成：世纪）且同一年的第N天来判断的。 补充在贴一个如何获得明天零点的代码： 1234567891011121314151617public class TestCalendar &#123; public static void main(String[] args) &#123; Date currentEndDate = new Date(); Calendar cal = Calendar.getInstance(); cal.setTime(currentEndDate); cal.add(Calendar.DATE, 1); cal.set(Calendar.AM_PM, 0); cal.set(Calendar.HOUR, 0); cal.set(Calendar.MINUTE, 0); cal.set(Calendar.SECOND, 0); Date nextDate = cal.getTime(); System.out.println(nextDate); &#125; &#125;","categories":[{"name":"Java","slug":"Java","permalink":"http://marin.kim/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://marin.kim/tags/Java/"}]},{"title":"Java IO流","slug":"JavaIO","date":"2018-03-26T07:19:01.101Z","updated":"2018-08-23T07:01:06.420Z","comments":true,"path":"2018/03/26/JavaIO/","link":"","permalink":"http://marin.kim/2018/03/26/JavaIO/","excerpt":"","text":"概述Java中对于数据的操作都是通过流来实现的，而所有操作流的对象都在IO包中。所谓IO流其实是指，Input和Output流。首先明白字节(Byte)和字符(Character)的大小 1 byte = 8 bit 1 char = 2 byte = 16 bit(Java默认UTF-16编码) 详细请看下面关系图： IO图 File对象File对象用来描述操作系统中文件对象，可以是单个文件或是一个文件目录 1.创建File对象1File file = new File(\"C:\" + File.separator+ \"1.txt\"); ps: File.separator是File封装的静态字段，表示路径分隔符，因为在Windows和Linux系统分隔符不一样，所有如果用”/”在不同环境下就会报错，所以采用File.separator来表示分隔符，这是一个良好的代码编写习惯。 2.File对象常用APIFile常见API没多少，如果不知道的可以自行百度一波，都是很简单的🤣。 字节流1.概述字节流一般用来操作媒体文件（媒体文件也是以字节存储的） InputStream:所有字节输入流的父类，具有基础的读方法int read()–读取一个字节，以int形式返回,如果返回值为-1，说明读到了文件的末尾int read(byte[] b)–尝试最多读取给定byte数组的长度个字节并存入该数组，返回值为实际读取到的自己量 OutPutStream:是所有字节输出流的父类，具有基础的写出方法void write(int d)–写出一个字节void write(byte[] d)–将给定字节数组中的所有字节全部写出void write(byte[] d,int off,int len)–写出字节数组中从下标off开始的连续length个字节 2.练习个人认为对于IO流的理解还是得靠代码，读懂代码才是王道。Test:复制一张图片F:\\java_Demo\\1.bmp到F:\\java_Demo\\2.bmp 12345678910111213141516171819202122232425262728293031323334353637class CopyPic &#123; public static void main(String[] args)&#123; copyBmp(); System.out.println(\"复制完成\"); &#125; public static void copyBmp() &#123; FileInputStream fis = null; FileOutputStream fos = null; try &#123; //写入流关联文件 fis = new FileInputStream(\"F:\"+File.separator+\"java_Demo\"+File.separator+\"1.bmp\"); //读取流关联文件 fos = new FileInputStream(\"F:\"+File.separator+\"java_Demo\"+File.separator+\"2.bmp\"); byte[] copy = new byte[1024]; int len = 0; while((len=fis.read(copy))!=-1) &#123; fos.write(copy,0,len); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); throw new RuntimeException(\"复制文件异常\"); &#125; finally &#123; try &#123; if(fis!=null) fis.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); throw new RuntimeException(\"读取流\"); &#125; &#125; &#125; &#125; 3.字节流缓冲区BufferedInputStream,BufferedOutputStream缓冲流的内部维护了一个缓冲区，每当向输入输出流读写数据时，会先将数据保存在缓冲区，当缓冲区满了以后，将数据一次性读写出来，这样可以减少IO操作的次数，从而提高读写效率 Demo:使用缓冲输出流和缓冲输入流实现文件的复制 12345678910111213141516171819202122232425262728293031public class SummaryBISAndBOS &#123; public static void main(String[] args)&#123; /** * 1.先将文件中的内容读入到缓冲输入流中 * 2.将输入流中的数据通过缓冲输出流写入到目标文件中 * 3.关闭输入流和输出流 */ try &#123; long begin=System.currentTimeMillis(); FileInputStream fis=new FileInputStream(\"BISDemo.txt\"); BufferedInputStream bis=new BufferedInputStream(fis); FileOutputStream fos=new FileOutputStream(\"BOSDemo.txt\"); BufferedOutputStream bos=new BufferedOutputStream(fos); int size=0; byte[] buffer=new byte[10240]; while((size=bis.read(buffer))!=-1)&#123; bos.write(buffer, 0, size); &#125; //刷新此缓冲的输出流，保证数据全部都能写出 bos.flush(); bis.close(); bos.close(); long end=System.currentTimeMillis(); System.out.println(\"使用缓冲输出流和缓冲输入流实现文件的复制完毕！耗时：\"+(end-begin)+\"毫秒\"); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 字符流字符流以char为单位对数据进行读写，一次处理一个unicode，字符流的底层是基本的字节流。Reader是字符输入流的父类 int read() –读取一个字符，这个int返回值可以转换为其对应的char型字符，如果返回-1，说明已经到达末尾int read(char[] chars) –从流中读取一个字符数组的length个字符并存入该数组，返回值为实际读取到的字符量 Writer是字符输出流的父类void write(int c) –写出一个字符void write(char[] chs) –将给定字符数组中的所有字符写出void write(String str) –将给定的字符串写出void write(char[] chs,int off,int len) –将给定字符数组中从off开始连续len个字符写出 练习Test: 用字符流拷贝文件 12345678910111213141516171819202122232425262728293031323334353637383940class CopyText &#123; public static void main(String[] args) throws IOException &#123; sop(\"请输入要拷贝的文件的路径:\"); Scanner in = new Scanner(System.in); String source = in.next(); sop(\"请输入需要拷贝到那个位置的路径以及生成的文件名:\"); String destination = in.next(); in.close(); CopyTextDemo(source,destination); &#125; /*****************文件Copy*********************/ private static void CopyTextDemo(String source,String destination) &#123; try &#123; FileWriter fw = new FileWriter(destination); FileReader fr = new FileReader(source); char [] buf = new char[1024]; //将Denmo中的文件读取到buf数组中。 int num = 0; while((num = fr.read(buf))!=-1) &#123; //String(char[] value , int offest,int count) 分配一个新的String,包含从offest开始的count个字符 fw.write(new String(buf,0,num)); &#125; fr.close(); fw.close(); &#125; catch (IOException e) &#123; sop(e.toString()); &#125; &#125; /**********************Println************************/ private static void sop(Object obj) &#123; System.out.println(obj); &#125; &#125; 字符流缓冲区BufferedReader，BufferedWriter 作用及实现和字节流缓冲区大同小异。 Test: BufferedReader示例 1234567891011121314151617181920class BufferedReaderDemo &#123; public static void main(String[] args) throws IOException &#123; //创建一个字符读取流流对象，和文件关联 FileReader rw = new FileReader(\"buf.txt\"); //只要将需要被提高效率的流作为参数传递给缓冲区的构造函数即可 BufferedReader brw = new BufferedReader(rw); for(;;) &#123; String s = brw.readLine(); if(s==null) break; System.out.println(s); &#125; brw.close();//关闭输入流对象 &#125; &#125; Test: BufferedWriter示例 1234567891011121314151617181920212223242526272829class BufferedWriterDemo &#123; public static void main(String[] args) throws IOException &#123; //创建一个字符写入流对象 FileWriter fw = new FileWriter(\"buf.txt\"); //为了提高字符写入效率，加入了缓冲技术。 //只要将需要被提高效率的流作为参数传递给缓冲区的构造函数即可 BufferedWriter bfw = new BufferedWriter(fw); //bfw.write(\"abc\\r\\nde\"); //bfw.newLine(); 这行代码等价于bfw.write(\"\\r\\n\"),相当于一个跨平台的换行符 //用到缓冲区就必须要刷新 for(int x = 1; x &lt; 5; x++) &#123; bfw.write(\"abc\"); bfw.newLine(); //java提供了一个跨平台的换行符newLine(); bfw.flush(); &#125; bfw.flush(); //刷新缓冲区 bfw.close(); //关闭缓冲区，但是必须要先刷新 //注意，关闭缓冲区就是在关闭缓冲中的流对象 fw.close(); //关闭输入流对象 &#125; &#125; NIONIO 非阻塞IO(面向缓冲)1.NIO弥补了原来I/O的不足之处，在IO操作中提供了高速度的，面向块的IO操作2.NIO中数据的打包和传递方式是以块为单位的，普通IO中以流为操作单位 NIO的2个重要特性(1)通道通道(Channel)是对于普通I/O中流的模拟，从任何地方读数据，或将数据写到任何地方都必须通过一个Channel对象 (2)缓冲区缓冲区Buffer实质上是一个容器对象，发送给一个通道的所有对象都必须首先放到缓冲区中；同样，从一个通道中读取数据时也需要先读取到缓冲区中。在NIO中，所有数据都是用缓冲区进行处理的。 ps:NIO效率无疑是要大大的高于IO操作的，但是实现过程要比IO复杂的多，可自行百度学习。 总结复习了一下以前学习的IO知识，写的不是很完善，因为写博客很花时间，我现在每天很忙😂，继续努力吧。","categories":[{"name":"Java","slug":"Java","permalink":"http://marin.kim/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://marin.kim/tags/Java/"},{"name":"IO","slug":"IO","permalink":"http://marin.kim/tags/IO/"}]},{"title":"仅以这篇博客记录我未来的编程生活","slug":"firstBlog","date":"2018-03-25T13:57:42.266Z","updated":"2018-08-23T07:12:51.642Z","comments":true,"path":"2018/03/25/firstBlog/","link":"","permalink":"http://marin.kim/2018/03/25/firstBlog/","excerpt":"","text":"知识是一个不断积累的过程2015年开始进入大学接触编程先是学了C，然后是C#，现在主要在使用Java进行开发，还想学习Python。回想起之前的编程学习之路感觉自己学的多，忘记的更多😂，现在我想把我学习的知识记录下来，方便自己以后翻看。 123456#include&lt;stdio.h&gt;int main()&#123;printf(\"hello world!\\n\");&#125;","categories":[{"name":"Daily","slug":"Daily","permalink":"http://marin.kim/categories/Daily/"}],"tags":[{"name":"Daily","slug":"Daily","permalink":"http://marin.kim/tags/Daily/"}]},{"title":"Mac下打造优美的终端","slug":"打造优美的mac终端","date":"2018-03-25T13:57:42.266Z","updated":"2018-09-01T07:07:20.876Z","comments":true,"path":"2018/03/25/打造优美的mac终端/","link":"","permalink":"http://marin.kim/2018/03/25/打造优美的mac终端/","excerpt":"","text":"概述首先呢Mac终端是我们每天都要用到的(对于程序员🤒来说),虽然比windows下终端颜值高了些，而且还有许多自定义的调节(透明度，ANSI等等)，但是还是很丑。。。我自己参考了一些教程，最后做出来效果是这样的 效果图 教程首先开始之前，你必须要学会基本的Linux操作命令，如ls、vim之类的，下面用的命令都很简单。在者你需要安装一些东西，如pip、git 安装oh-my-zsh命令：sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;很抱歉，忘了截图了😂。一般只有网络通畅应该没问题。官网在这里。如果你安装不上，可以去官网试一下其他方法。 修改主题我们需要修改.zshrc这个文件，将主题修改成agnoster,官网主题自己可以看看。命令：vim ~/.zshrc 修改主题 配置字体现在打开终端应该乱码了，我们需要下载安装Powerlin字体。我们用pip安装，没有的先装一下pip，命令：sudo easy_install pip安装Powerlin命令：pip install powerline-statusPS: 这里新版Mac使用pip可以报错，解决看这里。 下载安装字体库：git clone https://github.com/powerline/fonts ~/Downloads/githubcd ~/Downloads/fonts./install.sh 配置终端快捷键command+,打开终端设置。配置好字体后就不会乱码了，字体需要带powerlin字样 终端 其他的可以参考图片配置ANSI颜色配置： #000000 #FF7E79 #1DBB9A #FEF034 #69AEF8 #A665A5 #1DAFEC #C7C7C7 #666666 #FD6D71 #3CC5AA #FEFB67 #69AEF8 #EE6FA9 #468CC8 #FFFFFF 最后，透明度50%,去掉模糊。 总结好了，是不是美滋滋。😇","categories":[{"name":"Util","slug":"Util","permalink":"http://marin.kim/categories/Util/"}],"tags":[{"name":"Util","slug":"Util","permalink":"http://marin.kim/tags/Util/"}]}]}